/* Todo: Reglas CSS */

/* ? 1) Selector  */
/* ? 2) Propedad - valor */

/* 
* selector{
*   propiedad:valor;
* }
*/


/* ? Selectores básicos  */

html {
    margin: 0px;
    padding: 0px;
    background-color: aliceblue;
}

body {
    margin: 0px;
    padding: 0px;
    background-color: antiquewhite;
}

h1, h2 {
    margin: 0;
    font-weight: bold;
    font-size: 36px;
    color: green;
}

h1 {
    color: blueviolet;
}

h2 {
    color: green;
    font-weight: bold;
    font-size: 20px;
}

p {
    color: brown;
}

/* ? Selectores por Clase */

.color-primary {
    color: royalblue;
}

.txt-16 {
    font-size: 16px;
}

/* ? Selectores por Identificadores */

#texto {
    font-size: 20px;
    background-color: gainsboro;
}

#texto {
    color: #FFF;
    background-color: red;
    /* ! CSS toma la última propiedad */
    background-color: blueviolet;
}

/* ? Selectores por Atributos */

a {
    color: black;
}

a[target] {
    text-decoration: none;
}

a[href*="http://"] {
    color: red;
}

a[href*="https://"] {
    color: green;
}

a[href$=".mx"] {
    font-style: italic;
}

/* 

*https://developer.mozilla.org/es/docs/Web/CSS/Attribute_selectors 

*/

/* ? Selectores Avanzados */

/*
* <padre>
*    <hijos>
*    <hijos>
*    <hijos>
* </padre>
*/

.lista {
    color: blueviolet;
    background-color: aquamarine;
}

/* *Hijos directos */

.lista > li {
    background-color: yellowgreen;
}

/* .lista > span {
    color: cadetblue;
} */

/* .lista li > span {
    background-color: black;
} */

/* .lista > li > span {
    background-color: red;
} */

/* span {
    color: lightgray;
} */

/* Hijos descendientes */

.lista span{
    background-color: aquamarine;
}

/* * Hermanos */

/*
* <...>
*    <hermano>
*    <hermano>
*    <hermano>
* <...>
*/

/* * "~" se aplica a los elementos hermano que estén por debajo de la clase */

.item ~ li {
    background-color: blue;
}

/* * "+" se aplica al elemento hermano que está por debajo de la clase */

.item2 + li {
    background-color: gold;
}

/* ? Selectores Universales */

* {
    /* background-color: black; */
    box-sizing: border-box;
    scroll-behavior: smooth;
}

.lista * {
    color: darkcyan;
}

/* ? Pseudoclases */

/* * Es una palabra clave que se añade a los selectores y que especifica un estado especial del elemento seleccionado */

button {
    background-color: #05c905;
    color: #000000;
    border: none;
    padding: 8px 15px;
    margin-left: 45px;
}

/* * :hover aplicará un estilo cuando el usuario coloque el cursor sobre el elemento */

button:hover {
    background-color: blueviolet;
    color: #FFFFFF;
    transition: .2s;
}

/* * :active comienza cuando el usuario presiona el botón primario del mouse y termina cuando se suelta */

button:active {
    background-color: red;
    color: lightpink;
}

/* * :visited representa enlaces que el usuario ya ha visitado */

a:visited {
    color: darkgoldenrod;
}

/* * EJEMPLO 1: Pseudoclases | Clase padre */

.padre {
    padding: 0 50px;
}

.padre div:first-child{
    color: red;
}

.padre div:last-child{
    color: lightseagreen;
}

.padre div:nth-child(7) {
    font-size: 25px;
    padding-left: 20px;
}

/* * 1st, 2nd, 3rd, 4th, ..., nth */

.padre div:nth-child(3n) {
    text-decoration: 
    line-through;
}

.padre div:nth-child(4n + 2) {
    font-size: 30px;
}

.padre div:nth-child(even) {
    background-color:burlywood
}

.padre div:nth-child(odd) {
    background-color: beige;
}

/* * EJEMPLO 2: Pseudoclases | Clase father */

.father * {
    color: #000;
    margin: 0;
    padding: 0 50px;
    font-size: 16px;
}

.father p:first-of-type {
    color: orangered;
    padding-left: 40px;
}

.father span:last-of-type {
    color: palevioletred;
    padding-left: 60px;
}

.father div:nth-of-type(3) {
    font-size: 26px;
    font-weight: bold;
}

.father *:not(div) {
    background-color: gainsboro;
}

/* ? Pseudoelementos */

/* * Permiten añadir estilos estilos a una parte concreta del documento */

.copy {
    color: #000;
    margin-left: 15px;
}

/* * Antes */

.copy::before {
    content: "® ";
}

/* * Después */

a[target="_blank"]::after {
    content: "↗";
} 

.cuento::first-letter{
    font-size: 40px;
    font-family: Arial, Helvetica, sans-serif;
}

::selection {
    background-color: purple;
    color: beige;
}

.cuento::selection{
    background-color: lightblue;
    color: #000;
}

/* ::-webkit-scrollbar {
    width: 10px;
}

::-webkit-scrollbar-button {
    box-shadow: inset 0 0 6px darkblue;
}


::-webkit-scrollbar-thumb {
    border-radius: 10px;
    box-shadow: inset 0 0 6px darkblue;
} */

/* ? Agrupación de selectores */

.button, .link {
    background-color:white;
    border: 1px solid #999;
    padding: 10px 20px;
    font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif;
    font-size: 14px;
    text-decoration: none;
}

.link:hover, .button:hover {
    background-color: blue;
    color: azure;
    transition: .5s;
}

/* .link {
    text-decoration: none;
} */

/* ? Introducción a la especificidad */

/* * El algoritmo de CSS es la forma en que el navegador aplica los estilos al documento

* 1) La cascada 
* 2) La especificidad 
* 3) La herencia 
*/

/* ? Cascada  */

/* 
* La cascacada es el mecanismo en que el navegador aplica los estilos. Y toma en cuenta el siguente orden::after

* 1) Orden de aparición
*   - El User Agent (los estilos por defecto del navegador)
*   - Los estilos del autor

* 2) Especificidad
*/

.h6 {
    color: darkmagenta;
}

h6 {
    color: blue;
}

.h6 {
    color: darkorange;
    color: darkred;
}

/* * La especificidad se calcula de la siguiente forma: */

/* 
* Selectores por:
* Etiquetas y pseudoelementos      -----> 0, 0, 0, 1
* Clases, atributos y pseudoclases -----> 0, 0, 1, 0
* Identificadores                  -----> 0, 1, 0, 0
* Estilos en linea                 -----> 1, 0, 0, 0
*/

/* h6 {
    color: black !important;
} */

.h6 {
    color: black !important;
}

/* ! !important rompe la especificidad */

/* ? Introducción a Herencia */

/* * La herencia es la capacidad de un selector de obtener (heredar) los valores de sus ancestros más cercanos. Para aplicar se usa el valor "inherit", si queremos evitarla podemos asignar otro valor o inicializar la propiedad en cuestión */

.caja {
    border: 1px solid;
    width: 250px;
    height: 150px;
    font-size: 40px;
}

.titulo {
    /* font-size: inherit; */
    /* font-size: 14px; */
    font-size: initial;
    /* * "initial" deja el valor por defecto */
    color: initial;
    background-color: chocolate;
    height: inherit;
    height: 148px;
}

/* ? Modelo de caja */

.box {
    border: 5px solid;
    padding: 20px;
    margin: 20px;
    width: 250px;
}

.box1, .box2 {
    font-size: 12px;
    border: 2px solid;
    padding: 20px;
    margin: 20px;
    width: 200px;
}

.box2 {
    box-sizing: border-box;
    box-sizing: content-box;
}

/*
* border-box: 200px de ancho
* content-box: 200px + 20px + 20px + 4px
*/

/* * Cajas en bloque y en línea */

.block,
.inline,
.inline-block {
    border: 3px double magenta;
    border-width: 2px;
    border-style: solid;
    border-color: black;
    width: 250px;
    height: 150px;
}

/* ? Caja en bloque */

/*
* - Ocupan todo el ancho disponible, lo que genera un salto de línea
* - Si puedes aplicarle un ancho y un alto
* - No permiten elementos a su lado
*/

.block {
    /* * El valor por defecto */
    /* display: block; */
    display: inline;
    display: block;
    margin: 10px;
    padding: 10px;
}

/* ? Cajas en línea */

/*
* - Ocupan el espacio necesario para mostrar contenido
* - No permiten aplicarles un ancho y un alto
* - Permiten otros elementos a su lado
*/

.inline {
    display: block;
    display: inline;
    margin: 10px;
    /* padding: 10px; */
}

.inline-block {
    display: block;
    display: inline;
    display: inline-block;
}

/* ? Visibilidad de los elementos */

.none,
.hidden {
    border: 3px double gray;
    padding: 20px;
    margin: 10px;
    width: 250px;
    height: 140px;
}

.none {
    display: none;
}

.hidden {
    visibility: hidden;
}

.overflow {
    padding: initial;
    margin: initial;
    width: inherit;
    height: inherit;

    /* overflow: hidden; */
    /* overflow: scroll; */
    /* overflow-x: none;
    overflow-y: auto; */
    overflow: auto;
}

/* ? Posicionamiento CSS */

.nav {
    border: 2px solid #999;
    padding: 15px;
    margin-top: 100px;
    width: 250px;
    height: 350px;
}

.nav section {
    padding: 20px;
    width: 200px;
    background-color: lightblue;
    height: 75px;
    margin-bottom: 10px;
}

.nav h5 {
    font-size: initial;
    color: initial;
}

.bloque {
    border: 3px solid #d3d3d3;
    padding: 5px;
    margin: 2px;
    width: 250px;
}

/*  ? POSITION */

/* * La propiedad POSITION nos permite modificar la posicion natural de cualquier elemento del documento HTML */

/* ? Tipos de posicionamiento */

/*
* - Static
* - Relative
* - Absolute
* - Fixed
* - Sticky
*/

/*
* Para mover los elementos se activan las propiedades TOP, BOTTOM, LEFT, RIGHT, Z-INDEX (profundidad).

! Estas propiedades NO nuncionan con el valor STATIC (por defecto).
*/

/* ? Relative */

/* * El elemento conserva sus dimensiones y posicion original en el flujo del documento */

.relative {
    border: 3px solid;
    padding: 10px;
    /* margin-top: 100px; */
    position: relative;
    /* top: 0px; */
    /* left: 0px; */
    right: -10px;
    bottom: -25px;
    width: 250px;
}

/* ? Absolute  */

/*
* El elemento pierde sus dimensiones y posicion original en el flujo del documento. Si se mueve puede tomar como referencia 2 elementos:

* 1) El primer ancestro con posicionamiento relativo
* 2) Si no encuentra un ancestro relativo, se mueve respecto del documento HTML
*/

.container {
    border: 3px solid lightgreen;
    height: 250px;
    position: relative;
    top: 50px;
}

.absolute {
    border: 3px solid lightpink;
    padding: 10px;
    position: relative;
    position: absolute;
    top: 100px;
    left: 50px;
    bottom: 50px;
    right: 100px;
}

/* ? Fixed */

/* * El elemento pierde sus dimensiones y posicion original en el flujo del documento. Si se mueve, toma como referencia el documento HTML y queda fijo en la posicion. Cuando el scroll se mueva el elemento no lo hará, se queda FIJO */

.fixed h4 {
    color: initial;
    font-size: initial;
}

.fixed {
    border: 3px solid;
    height: 80px;
    padding-top: 8px;
    background-color: #ccc;
    position: fixed;
    /* top: 0px; */
    width: 100%;
    /* bottom: 0px; */
    top: 0px;
    /* right: 10px;
    left: 40px; */
    z-index: 0;
}

h1 {
    /* margin-top: 45px; */
    padding-top: 45px;
}

/* ? Sticky */

.sticky{
    border: 3px solid plum;
    background-color: black;
    color: plum;
    padding: 10px;
    position: sticky;
    top: 80px;
}

.sticky2 {
    border: 2px solid;
    background-color: black;
    color: slateblue;
    position: sticky;
    bottom: 0;

}












